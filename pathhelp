 class JNode {
        Dictionary<string, JNode> children;
        string name;
        string value;
        bool noQM;
        bool isArrayElement;

        JNode(string name)
        {
            isArrayElement= new Regex(@"\[\d\]$").IsMatch(name);
            this.name = name;
            children = new Dictionary<string, JNode>();
        }

        public JNode(List<pathy> xPathList)
        {
            children = new Dictionary<string, JNode>();
            foreach (var path in xPathList)
            {
                JNode c = this;
                var data = path.path.Split(' ');
                string[] splitedPath = data[0].Split('\\');
                foreach (var subPath in splitedPath)
                {
                    c.AddNode(subPath);
                    c = c.children[subPath];
                }
                c.value = path.value;
                c.noQM = data.Length > 1; 
            }
        }

        void AddNode(string name)
        {
           if(!children.ContainsKey(name)){
                children[name] = new JNode(name);
            }
        }

        string GetJson()
        {       
            if (children.Count != 0)
            {
                StringBuilder sb = new StringBuilder();
               char[] section=  children.All(c => c.Value.isArrayElement)?
                    new char[] { '[', ']' } :
                    new char[] { '{', '}' };
                if(!isArrayElement)
                sb.Append($"\"{name}\": {section[0]}");
                else
                    sb.Append($"{section[0]}");
                foreach (var child in children)
                {
                    sb.Append(child.Value.GetJson() + ",");
                }
                sb.Replace(',',section[1],sb.Length - 1, 1);
                return sb.ToString();
            }
            return  noQM?           
                $"\"{name}\": {value}":
                 $"\"{name}\": \"{value}\"";
        }

        public string GetJson(bool noRoot=true)
        {
            var result = GetJson();
            int start =GetIndex( result,'"', noRoot ? 4 : 2);
            int end = noRoot ? 1:0;
            return result.Substring(start,result.Length -start-end);
        }

        int GetIndex(string str,char ch,int count)
        {
            int res = 0;
            for (int i = 0; i < count; i++)
            {
                res = str.IndexOf(ch, res)+1;
            }
            return res+1;
        }
    }
